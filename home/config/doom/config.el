;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!


;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets. It is optional.
;; (setq user-full-name "John Doe"
;;       user-mail-address "john@doe.com")

;; Doom exposes five (optional) variables for controlling fonts in Doom:
;;
;; - `doom-font' -- the primary font to use
;; - `doom-variable-pitch-font' -- a non-monospace font (where applicable)
;; - `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;; - `doom-symbol-font' -- for symbols
;; - `doom-serif-font' -- for the `fixed-pitch-serif' face
;;
;; See 'C-h v doom-font' for documentation and more examples of what they
;; accept. For example:
;;
;;(setq doom-font (font-spec :family "Fira Code" :size 12 :weight 'semi-light)
;;      doom-variable-pitch-font (font-spec :family "Fira Sans" :size 13))
;;
;; If you or Emacs can't find your font, use 'M-x describe-font' to look them
;; up, `M-x eval-region' to execute elisp code, and 'M-x doom/reload-font' to
;; refresh your font settings. If Emacs still can't find your font, it likely
;; wasn't installed correctly. Font issues are rarely Doom issues!

;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
(setq doom-theme 'doom-one)

;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type t)


;; Whenever you reconfigure a package, make sure to wrap your config in an
;; `after!' block, otherwise Doom's defaults may override your settings. E.g.
;;
;;   (after! PACKAGE
;;     (setq x y))
;;
;; The exceptions to this rule:
;;
;;   - Setting file/directory variables (like `org-directory')
;;   - Setting variables which explicitly tell you to set them before their
;;     package is loaded (see 'C-h v VARIABLE' to look up their documentation).
;;   - Setting doom variables (which start with 'doom-' or '+').
;;
;; Here are some additional functions/macros that will help you configure Doom.
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package!' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c c k').
;; This will open documentation for it, including demos of how they are used.
;; Alternatively, use `C-h o' to look up a symbol (functions, variables, faces,
;; etc).
;;
;; You can also try 'gd' (or 'C-c c d') to jump to their definition and see how
;; they are implemented.
;; (setq user-full-name "Lokesh Mohanty"
;;       user-mail-address "")

;; When I bring up Doom's scratch buffer with SPC x, it's often to play with
;; elisp or note something down (that isn't worth an entry in my notes). I can
;; do both in `lisp-interaction-mode'.
(setq doom-scratch-initial-major-mode 'lisp-interaction-mode)


;;
;;; UI

;; (load! "config.local.el" nil t) ; generated by my nixos config

(setq doom-font (font-spec :family "JetBrainsMono" :size 18)
      doom-variable-pitch-font (font-spec :family "DejaVu Sans" :size 19))

;; I install nerd-icons via nixos
;; (setq nerd-icons-font-names '("SymbolsNerdFontMono-Regular.ttf"))

;; Line numbers are pretty slow all around. The performance boost of disabling
;; them outweighs the utility of always keeping them on.
(setq display-line-numbers-type nil)

;; Prevents some cases of Emacs flickering.
(add-to-list 'default-frame-alist '(inhibit-double-buffering . t))


;; ;;
;; ;;; Keybinds

;; ;; (map! (:after evil-org
;; ;;        :map evil-org-mode-map
;; ;;        :n "gk" (cmds! (org-on-heading-p)
;; ;;                       #'org-backward-element
;; ;;                       #'evil-previous-visual-line)
;; ;;        :n "gj" (cmds! (org-on-heading-p)
;; ;;                       #'org-forward-element
;; ;;                       #'evil-next-visual-line))

;; ;;       :o "o" #'evil-inner-symbol

;; ;;       :leader
;; ;;       "h L" #'keycast-mode
;; ;;       (:prefix "f"
;; ;;        "t" #'find-in-dotfiles
;; ;;        "T" #'browse-dotfiles)
;; ;;       (:prefix "n"
;; ;;        "b" #'org-roam-buffer-toggle
;; ;;        "d" #'org-roam-dailies-goto-today
;; ;;        "D" #'org-roam-dailies-goto-date
;; ;;        "e" (cmd! (find-file (doom-path org-directory "ledger/personal.gpg")))
;; ;;        "i" #'org-roam-node-insert
;; ;;        "r" #'org-roam-node-find
;; ;;        "R" #'org-roam-capture))


;; ;;
;; ;;; Modules

;; ;;; :completion corfu
;; ;; IMO, modern editors have trained a bad habit into us all: a burning need for
;; ;; completion all the time -- as we type, as we breathe, as we pray to the
;; ;; ancient ones -- but how often do you *really* need that? I say rarely, so opt
;; ;; for manual completion:
;; ;; (after! corfu
;; ;;   (setq corfu-auto nil))


;; ;;; :ui modeline
;; ;; An evil mode indicator is redundant with cursor shape
;; (setq doom-modeline-modal nil
;;       doom-modeline-check-simple-format t)


;; ;;; :editor evil
;; ;; Focus new window after splitting
;; (setq evil-split-window-below t
;;       evil-vsplit-window-right t)

;; ;; Implicit /g flag, because I rarely use it without
;; (setq evil-ex-substitute-global t)


;; ;;; :tools lsp
;; ;; Disable invasive lsp-mode features
;; (after! lsp-mode
;;   (setq lsp-enable-symbol-highlighting nil
;;         ;; If an LSP server isn't present when I start a prog-mode buffer, you
;;         ;; don't need to tell me. I know. On some machines I don't care to have
;;         ;; a whole development environment for some ecosystems.
;;         lsp-enable-suggest-server-download nil))
;; (after! lsp-ui
;;   (setq lsp-ui-sideline-enable nil  ; no more useful than flycheck
;;         lsp-ui-doc-enable nil))     ; redundant with K



;; ;;; :lang org
(setq org-directory "~/Documents/Org/"
      org-roam-directory "~/Documents/Org/Roam")
;;       org-roam-db-location (file-name-concat org-directory ".org-roam.db")
;;       ;; org-roam-dailies-directory "journal/"
;;       org-archive-location (file-name-concat org-directory ".archive/%s::")
;;       org-agenda-files (list org-directory)
;;       org-log-done-with-time nil
;;       org-habit-show-habits-only-for-today nil)

;; (after! org
;;   (add-to-list 'org-modules 'org-habit)
;;   (setq org-startup-folded 'show2levels
;;         org-ellipsis " [...] "
;;         org-capture-templates
;;         '(("t" "todo" entry (file+headline "todo.org" "Inbox")
;;            "* [ ] %?\n%i\n%a"
;;            :prepend t)
;;           ("d" "deadline" entry (file+headline "todo.org" "Inbox")
;;            "* [ ] %?\nDEADLINE: <%(org-read-date)>\n\n%i\n%a"
;;            :prepend t)
;;           ("s" "schedule" entry (file+headline "todo.org" "Inbox")
;;            "* [ ] %?\nSCHEDULED: <%(org-read-date)>\n\n%i\n%a"
;;            :prepend t)
;;           ("c" "check out later" entry (file+headline "todo.org" "Check out later")
;;            "* [ ] %?\n%i\n%a"
;;            :prepend t)
;;           ("l" "ledger" plain (file "ledger/personal.gpg")
;;            "%(+beancount/clone-transaction)"))))

;; (after! org-agenda
;;   (setq org-agenda-todo-list-sublevels nil
;;         org-agenda-compact-blocks t
;;         org-agenda-sorting-strategy
;;         '((agenda time-up category-keep habit-up priority-down)
;;           (todo priority-down category-keep) (tags priority-down category-keep)
;;           (search category-keep))))

;; (after! org-roam
;;   (setq org-roam-capture-templates
;;         `(("n" "note" plain
;;            ,(format "#+title: ${title}\n%%[%s/template/note.org]" org-roam-directory)
;;            :target (file "note/%<%Y%m%d%H%M%S>-${slug}.org")
;;            :unnarrowed t)
;;           ("r" "thought" plain
;;            ,(format "#+title: ${title}\n%%[%s/template/thought.org]" org-roam-directory)
;;            :target (file "thought/%<%Y%m%d%H%M%S>-${slug}.org")
;;            :unnarrowed t)
;;           ("t" "topic" plain
;;            ,(format "#+title: ${title}\n%%[%s/template/topic.org]" org-roam-directory)
;;            :target (file "topic/%<%Y%m%d%H%M%S>-${slug}.org")
;;            :unnarrowed t)
;;           ("c" "contact" plain
;;            ,(format "#+title: ${title}\n%%[%s/template/contact.org]" org-roam-directory)
;;            :target (file "contact/%<%Y%m%d%H%M%S>-${slug}.org")
;;            :unnarrowed t)
;;           ("p" "project" plain
;;            ,(format "#+title: ${title}\n%%[%s/template/project.org]" org-roam-directory)
;;            :target (file "project/%<%Y%m%d>-${slug}.org")
;;            :unnarrowed t)
;;           ("i" "invoice" plain
;;            ,(format "#+title: %%<%%Y%%m%%d>-${title}\n%%[%s/template/invoice.org]" org-roam-directory)
;;            :target (file "invoice/%<%Y%m%d>-${slug}.org")
;;            :unnarrowed t)
;;           ("f" "ref" plain
;;            ,(format "#+title: ${title}\n%%[%s/template/ref.org]" org-roam-directory)
;;            :target (file "ref/%<%Y%m%d%H%M%S>-${slug}.org")
;;            :unnarrowed t)
;;           ("w" "works" plain
;;            ,(format "#+title: ${title}\n%%[%s/template/works.org]" org-roam-directory)
;;            :target (file "works/%<%Y%m%d%H%M%S>-${slug}.org")
;;            :unnarrowed t)
;;           ("s" "secret" plain "#+title: ${title}\n\n"
;;            :target (file "secret/%<%Y%m%d%H%M%S>-${slug}.org.gpg")
;;            :unnarrowed t))
;;         ;; Use human readable dates for dailies titles
;;         org-roam-dailies-capture-templates
;;         `(("d" "default" plain ""
;;            :target (file+head "%<%Y-%m-%d>.org" ,(format "%%[%s/template/journal.org]" org-roam-directory))))))

;; ;; (after! org-tree-slide
;; ;;   ;; I use g{h,j,k} to traverse headings and TAB to toggle their visibility, and
;; ;;   ;; leave C-left/C-right to .  I'll do a lot of movement because my
;; ;;   ;; presentations tend not to be very linear.
;; ;;   (setq org-tree-slide-skip-outline-level 2))

;; ;; (after! org-roam
;; ;;   ;; Offer completion for #tags and @areas separately from notes.
;; ;;   (add-to-list 'org-roam-completion-functions #'org-roam-complete-tag-at-point)

;; ;;   ;; Automatically update the slug in the filename when #+title: has changed.
;; ;;   (add-hook 'org-roam-find-file-hook #'org-roam-update-slug-on-save-h)

;; ;;   ;; Make the backlinks buffer easier to peruse by folding leaves by default.
;; ;;   (add-hook 'org-roam-buffer-postrender-functions #'magit-section-show-level-2)

;; ;;   ;; List dailies and zettels separately in the backlinks buffer.
;; ;;   (advice-add #'org-roam-backlinks-section :override #'org-roam-grouped-backlinks-section)

;; ;;   ;; Open in focused buffer, despite popups
;; ;;   (advice-add #'org-roam-node-visit :around #'+popup-save-a)

;; ;;   ;; Make sure tags in vertico are sorted by insertion order, instead of
;; ;;   ;; arbitrarily (due to the use of group_concat in the underlying SQL query).
;; ;;   (advice-add #'org-roam-node-list :filter-return #'org-roam-restore-insertion-order-for-tags-a)

;; ;;   ;; Add ID, Type, Tags, and Aliases to top of backlinks buffer.
;; ;;   (advice-add #'org-roam-buffer-set-header-line-format :after #'org-roam-add-preamble-a))


;;; :ui doom-dashboard
(setq fancy-splash-image (file-name-concat doom-user-dir "splash.png"))
;; Hide the menu for as minimalistic a startup screen as possible.
(setq +doom-dashboard-functions '(doom-dashboard-widget-banner))
